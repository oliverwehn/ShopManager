<?php

class ShopManager extends Process implements Module, ConfigurableModule {

	public static function getModuleInfo() {
		return array(
			'title' => 'Shop Manager',
			'summary' => __('Management section for your shop in backend', __FILE__),
			'version' => 001,
			'permanent' => false,
			'singular' => false,
			'permission' => 'shop_manage',
			'requires' => array('ProcessList')
		);
	}
	
	public function __construct() {

	}
	
	public function init() {
	}
	
	public function ___execute() {
		return $this->render();
	}

	protected function render() {
		$out = "\n<dl class='nav'>";
		$cnt = 0; 
		foreach($this->page->children("check_access=0") as $child) {
			if(!$child->viewable()) continue;
			if($child->shopmanager_summary) {
				$title = $child->title;
				$summary = $child->shopmanager_summary;
			} else { 
				if($child->process) {
					$info = $this->modules->getModuleInfo($child->process);
					if(preg_match('#^Shop Manager: (.+)$#', $info['title'], $match)) {	
						$title = htmlspecialchars($match[1]);
					} else {
						$title = $info['title']; 
					}
					$summary = htmlspecialchars($info['summary']);
				} else {
					$title = $child->get("title|name"); 
					$summary = $this->_('No description available');
				}
			}
			$out .= "\n\t<dt><a class='label' href='{$child->url}'>$title</a></dt>";
			if($summary) $out .= "\n\t<dd>$summary</dd>";
			$cnt++;
		}

		$out .= "\n</dl>";
		if(!$cnt) $out = '';
		return $out; 
	}	
	
	static public function getModuleConfigInputfields(Array $data) {
		// this is a container for fields, basically like a fieldset
		$fields = new InputfieldWrapper();

		return $fields;
	}

	public function ___install() {
				
		$admin_template = $this->templates->get("admin");
		$admin = $this->config->adminRootPageID;
		$manager = new Page($admin_template);
		$manager->parent = $this->fuel('pages')->get($admin);
		$manager->title = 'Shop Manager';
		$manager->name = 'shop';
		$manager->status = Page::statusSystem;
		$manager->save();
		$this->message('Created page: '.$manager->path);
		
		// create the template used by Language pages
		$template = new Template();	
		$template->set('altFilename', basename($admin_template->filename));		
		$template->name = 'shopmanager_admin';
		$template->slashUrls = 1; 
		$template->pageLabelField = 'name';
		$template->noGlobal = 1; 
		$template->noMove = 1; 
		$template->noTrash = 1; 
		$template->noUnpublish = 1; 
		$template->noChangeTemplate = 1; 
		$template->nameContentTab = 1; 
		$template->flags = Template::flagSystem; 
		
		// create the fieldgroup to be used by the shopmanager template
		$fieldgroup = new Fieldgroup(); 
		$fieldgroup->name = $template->name;
		$fieldgroup->add($this->fuel('fields')->get('title'));
		// create process field
		$field = new Field();	
		$field->type = $this->fuel('modules')->get("FieldtypeModule"); 
		$field->name = 'shopmanager_process';
		$field->label = 'Shop Manager: Process';	
		$field->flags = Field::flagSystem;
		$field->save();
		$fieldgroup->add($field);
		$this->message("Created field: ".$field->name); 
		
		$field = new Field();	
		$field->type = $this->fuel('modules')->get("FieldtypeTextarea"); 
		$field->name = 'shopmanager_summary';
		$field->label = 'Shop Manager: Page Summary';	
		$field->flags = Field::flagSystem;
		$field->textformatters = array($this->fuel('modules')->get('TextformatterEntities'));
		$field->save();
		$fieldgroup->add($field);
		$this->message("Created field: ".$field->name); 
		
		// save fieldgroup 
		$fieldgroup->save();

		// add fieldgroup to template
		$template->fieldgroup = $fieldgroup; 
		$template->save();
		$template->parentTemplates = array($admin, $template);
		$template->save();
		$this->message("Created Template: " . $template->name); 
		
		// create settings pannel
		$settings = new Page($template);
		$settings->parent = $manager;
		$settings->title = 'Settings';
		$settings->name = 'settings';
		$settings->shopmanager_summary = $this->_('Manage shop settings');
		$settings->save();
		
		// manager installed
		$this->message('Installed module: '.$this->className());
		
		// now go for default sub modules
		// install orders management
		$process_orders = $this->fuel('modules')->get('ShopManagerOrders');
		
		// install customer management
		$process_customer = $this->fuel('modules')->get('ShopManagerCustomers');
		
		// install products management
		$process_products = $this->fuel('modules')->get('ShopManagerProducts');

		// install products management
		$process_manufacturers = $this->fuel('modules')->get('ShopManagerManufacturers');
		
		$this->message('Created page: '.$settings->path);
		
		// assign processes and save		
		$settings->shopmanager_process = $this;
		$settings->sort = count($settings->parent->children)+1;
		$settings->save();
		
		$manager->process = $this;
		$manager->save();		
	}
	
	public function ___uninstall() {
		$pages = $this->fuel('pages');
		
		$manager = $pages->get('template=admin, name=shop');
		if ($manager->id) {
			$manager->status = Page::statusSystemOverride;
			$manager->status = 0;
			$manager->save();
			$pages->delete($manager, true);
		} 
		
		$templates = $this->fuel('templates');
		$template = $templates->get('shopmanager_admin');
		if($template->id) {
			$fieldgroup = $template->fieldgroup;
			$delete = $pages->find('template='.$template->name);
			foreach($delete as $page) {
				$pages->delete($page, true);
			}
			$template->flags = Template::flagSystemOverride;
			$template->flags = 0;
			$template->save();
			$templates->delete($template);
			
			// delete fieldgroup 
			$this->fuel('fieldgroups')->delete($fieldgroup); 
			
			// delete fields
			$fields = $this->fuel('fields');
			$fieldlist = $fields->find('name^=shopmanager_');
			foreach($fieldlist as $field) {
				if($field->id) {
					$field->flags = Field::flagSystemOverride;
					$field->flags = 0;
					$field->save();
					$fields->delete($field);
				}
			}			
		} else {
			//throw new WireException('ShopManager admin template couldn’t be deleted');
		}
	}
}
